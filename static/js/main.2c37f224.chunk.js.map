{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBar.js","components/Header.js","components/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","div","Name","h2","Sub","p","Image","img","Card","id","name","species","image","status","src","alt","Boxes","CardList","characters","map","character","i","key","BarBox","Bar","input","SearchBar","searchChange","className","type","placeholder","onChange","Title","TitleText","h1","Header","ErrorBoundary","props","state","hasError","this","children","Component","Top","Main","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","data","results","filteredCharacters","filter","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"u7BAGA,IAAMA,EAAMC,IAAOC,IAAV,KAUHC,EAAOF,IAAOG,GAAV,KAKJC,EAAMJ,IAAOK,EAAV,KAKHC,EAAQN,IAAOO,IAAV,KAiBIC,EAXF,SAAC,GAAuC,EAAtCC,GAAuC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OACvC,OACE,kBAACd,EAAD,KACE,kBAACO,EAAD,CAAOQ,IAAKF,EAAOG,IAAI,KACvB,kBAACb,EAAD,KAAOQ,GAEP,kBAACN,EAAD,iBAAeO,GACf,kBAACP,EAAD,gBAAcS,K,0KChCpB,IAAMG,EAAQhB,IAAOC,IAAV,KA4BIgB,EApBE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACf,OACE,kBAACF,EAAD,KAEIE,EAAWC,KAAI,SAACC,EAAWC,GACzB,OACE,kBAAC,EAAD,CACEC,IAAOJ,EAAWG,GAAGZ,GACrBA,GAAMS,EAAWG,GAAGZ,GACpBC,KAAQQ,EAAWG,GAAGX,KACtBC,QAAWO,EAAWG,GAAGV,QACzBC,MAASM,EAAWG,GAAGT,MACvBC,OAAUK,EAAWG,GAAGR,c,gTCrBxC,IAAMU,EAASvB,IAAOC,IAAV,KAKNuB,EAAMxB,IAAOyB,MAAV,KAqBMC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,kBAACJ,EAAD,KACI,kBAACC,EAAD,CACII,UAAU,cACVC,KAAK,SACLC,YAAY,qBACZC,SAAYJ,M,oPCpB5B,IAAMK,EAAQhC,IAAOC,IAAV,KAMLgC,EAAYjC,IAAOkC,GAAV,KAIA,SAASC,IACtB,OACE,kBAACH,EAAD,KACE,kBAACC,EAAD,mC,ICCSG,E,YAdX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,UAAU,GAHA,E,sEAQd,OAAIC,KAAKF,MAAMC,SACJ,qCAEJC,KAAKH,MAAMI,a,GAZEC,a,8GCM5B,IAAMC,EAAM3C,IAAOC,IAAV,KA0CM2C,E,YArCb,WAAYP,GAAQ,IAAD,8BACjB,4CAAMA,KAYRQ,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAZzC,EAAKZ,MAAQ,CACXpB,WAAY,GACZ8B,YAAa,IAJE,E,iFAOC,IAAD,OACjBG,MAAM,8CACDC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAI,OAAI,EAAKR,SAAS,CAAC7B,WAAYqC,EAAKC,e,+BAO5C,IAAD,EAC8BhB,KAAKF,MAAjCpB,EADF,EACEA,WAAY8B,EADd,EACcA,YACdS,EAAqBvC,EAAWwC,QAAO,SAAAtC,GAC3C,OAAOA,EAAUV,KAAKiD,cAAcC,SAASZ,EAAYW,kBAG3D,OACE,yBAAK/B,UAAU,OACb,kBAACe,EAAD,KACE,kBAACR,EAAD,MACA,kBAAC,EAAD,CAAWR,aAAgBa,KAAKK,kBAElC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,WAAcuC,U,GA/BfI,IAAMnB,WCALoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c37f224.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Box = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 20px;\n  width: 220px;\n  color: palevioletred;\n  box-shadow: black 1px 1px 5px 0px;\n  background: white;\n  border-radius: 5px;\n`;\nconst Name = styled.h2`\n  max-width: 80%;\n  padding-left: 10px;\n  padding: 5px;\n`;\nconst Sub = styled.p`\n  padding: 5px;\n  padding-left: 20px;\n\n`;\nconst Image = styled.img`\n  width: 100%;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n`;\n\nconst Card = ({id, name, species, image, status}) => {\n  return (\n    <Box>\n      <Image src={image} alt=\"\"/>\n      <Name>{name}</Name>\n      {/* {id} */}\n      <Sub>Species: {species}</Sub>\n      <Sub>Status: {status}</Sub>\n    </Box>\n  )\n}\nexport default Card","import React from 'react'\nimport Card from './Card'\nimport styled from 'styled-components'\n\nconst Boxes = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  /* max-width: 100vw; */\n`;\n\n\nconst CardList = ({characters}) => {\n    return (\n      <Boxes>\n        {\n          characters.map((character, i) => {\n            return (\n              <Card \n                key = {characters[i].id}\n                id = {characters[i].id}\n                name = {characters[i].name}\n                species = {characters[i].species}\n                image = {characters[i].image}\n                status = {characters[i].status}\n              />\n            )\n          })\n        }\n      </Boxes>\n    )\n}\nexport default CardList","import React from 'react';\nimport styled from 'styled-components'\n\nconst BarBox = styled.div`\n  display: flex;\n  padding: 20px;\n  justify-content: center;\n`;\nconst Bar = styled.input`\n  border-radius: 20px;\n  padding: 10px;\n  height: 50px;\n  width: 200px;\n  text-align: center\n`;\n\nconst SearchBar = ({searchChange}) => {\n    return (\n        <BarBox>\n            <Bar \n                className='searchInput'\n                type='search' \n                placeholder='search a character' \n                onChange = {searchChange}\n            />\n        </BarBox>\n    );\n}\n\nexport default SearchBar;","import React from 'react'\nimport styled from 'styled-components'\n\nconst Title = styled.div`\n  display: flex;\n  padding: 20px;\n  justify-content: center;\n  color: white;\n`;\nconst TitleText = styled.h1`\n  font-size: 2.5em;\n`;\n\nexport default function Header() {\n  return (\n    <Title>\n      <TitleText>\n        Rick and Morty Characters\n      </TitleText>\n    </Title>\n  )\n}\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    render() {\n        if (this.state.hasError){\n            return <h1>oops!</h1>\n        }\n        return this.props.children\n    }\n}\nexport default ErrorBoundary;","import React from 'react';\nimport styled from 'styled-components'\nimport './App.css';\nimport CardList from './components/CardList'\nimport SearchBar from './components/SearchBar'\nimport Header from './components/Header'\nimport ErrorBoundary from './components/ErrorBoundary'\n\nconst Top = styled.div`\n  background: rgba(76, 175, 80, 0.5);\n`;\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      characters: [],\n      searchfield: ''\n    }\n  }\n  componentDidMount(){\n    fetch('https://rickandmortyapi.com/api/character/')\n        .then (response => response.json())\n        .then (data => this.setState({characters: data.results}))\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value})\n  }\n\n  render(){\n    const { characters, searchfield } = this.state;\n    const filteredCharacters = characters.filter(character => {\n      return character.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n    // console.log(this.state.characters)\n    return (\n      <div className=\"App\">\n        <Top>\n          <Header />\n          <SearchBar searchChange = {this.onSearchChange}/>\n        </Top>\n        <ErrorBoundary>\n          <CardList characters = {filteredCharacters}/>\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}